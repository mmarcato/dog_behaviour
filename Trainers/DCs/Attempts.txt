FAIL! 

ATEMPT TO  GET SUMMARY STATISTICS OF 
THE VARIABLES CONSIDERING DATA COLLECTION 1 AND DATA COLLECTION 2

```{r, include = TRUE}
## SUMMARY STATISTICS
for (var in na.omit(vars[vars$Test == "Wilcoxon", "Variable"])){
  print(var)
  #print(aggregate(var ~ Data.Collection.Number, data = dcs, summary))
  dcs %>% group_by(Data.Collection.Number) %>% summarise( paste(var, "_mean") = mean(var))
}    

dcs %>% group_by(Data.Collection.Number) %>% 
  summarise(var_means = mean(Familiarisation.Response..Oriented.to.Handler.))

subset(vars, Type == "categorical" | Type == "count" | Type == "ordinal"))
for (var in na.omit(vars[vars$Test == "Wilcoxon", "Variable"])){
  print(var)
  #print(wilcox.test(dcs[dcs$Data.Collection.Number == 1 , var],  dcs[dcs$Data.Collection.Number == 2, var], paired = TRUE)[1:3])
}

my_vars = na.omit(vars[vars$Test == "Wilcoxon", "Variable"])
df = dcs %>% select(my_vars) 
 group_by(Data.Collection.Number)
print(aggregate(var ~ Data.Collection.Number, data = dcs, summary))

dcs %>% 
  group_by(Data.Collection.Number) %>% 
  summarise( var_mean = mean(Familiarisation.Response..Oriented.to.Handler.)) 

```
vars[ vars$Type  , ]

unique(vars$Type)

data %>% 
my_vars = vars %>% subset(Type == "categorical" | Type == "count" | Type == "ordinal"  ) 
              %>% select(Variable)
vars %>% subset(Type == "categorical" | Type == "count" | Type == "ordinal"  )
vars %>% select(Variable)


TEST?


for (var in na.omit(vars[vars$Test == "Wilcoxon", "Variable"])){
  print(str(var))
  print(wilcox.test(dcs[dcs$Data.Collection.Number == 1 , var],  dcs[dcs$Data.Collection.Number == 2, var], paired = TRUE)[1:3])
}

wilcox <- function(var){
  print(var)
  wilcox.test(dcs[dcs$Data.Collection.Number == 1 , var],  dcs[dcs$Data.Collection.Number == 2, var], paired = TRUE)
}
stats <- function(test, var){
  if (!is.na(test)){
    if (test == 'Wilcoxon'){
        r = wilcox.test(dcs[dcs$Data.Collection.Number == 1 , as.character(var)],  dcs[dcs$Data.Collection.Number == 2, as.character(var)], paired = TRUE)
        return (r[3]$p.value)
        #return(list(r$statistic, r$p.value))
    } else if (test == 'Chisq'){
      dc1 = dcs[dcs$Data.Collection.Number == 1 , as.character(var)]
      dc2 = dcs[dcs$Data.Collection.Number == 2, as.character(var)]
      cat(dc1,"\n", dc2,"\n")
      cat(unique(dc1),"\n", unique(dc2),"\n")
      if ((unique(dc1) == unique(dc2)) & (length(unique(dc1))>1) & (length(unique(dc2))>1)){
        r = chisq.test(dc1, dc2)
        return(r[3]$p.value)
        #return(list(r$statistic, r$p.value))
      }
    }
  }
}
vars = vars %>% mutate(Result = mapply(FUN = stats, test = vars$Test, var = vars$Variable))
vars[ vars$Variable ==  "Tea.Towel.First.Response..Indifferent." , "Result"]

length(df)
lt = mapply(FUN = stats, test = vars$Test, var = vars$Variable)
df = as.data.frame(unlist(lt))
colnames(df)
df1 = as.data.frame(t(as.data.frame(lt)))
df2 = as.data.frame(matrix(unlist(lt), nrow = length(lt)))
name = names(df)
```